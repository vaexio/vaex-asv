{
    "aggregates.BinBy1d.time_count_star": {
        "code": "class BinBy1d:\n    def time_count_star(self, N):\n        self.df.count()\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i4_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i2_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i1_10, min_value=5, max_value=15, inplace=True)\n    \n        self.df.categorize(self.df.i8_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i2_1K, min_value=5, max_value=1_000+5, inplace=True)\n        # self.df.categorize(self.df.i1_1K, min_value=5, max_value=1_000+5)\n    \n        self.df.categorize(self.df.i8_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.BinBy1d.time_count_star",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "aggregates.BinBy1d.time_count_star_binby128": {
        "code": "class BinBy1d:\n    def time_count_star_binby128(self, N):\n        self.df.count(binby='x', limits=[-1, 1], shape=128)\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i4_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i2_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i1_10, min_value=5, max_value=15, inplace=True)\n    \n        self.df.categorize(self.df.i8_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i2_1K, min_value=5, max_value=1_000+5, inplace=True)\n        # self.df.categorize(self.df.i1_1K, min_value=5, max_value=1_000+5)\n    \n        self.df.categorize(self.df.i8_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.BinBy1d.time_count_star_binby128",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "aggregates.BinBy1d.time_count_x_binby128": {
        "code": "class BinBy1d:\n    def time_count_x_binby128(self, N):\n        self.df.count('x', binby='x', limits=[-1, 1], shape=128)\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i4_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i2_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i1_10, min_value=5, max_value=15, inplace=True)\n    \n        self.df.categorize(self.df.i8_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i2_1K, min_value=5, max_value=1_000+5, inplace=True)\n        # self.df.categorize(self.df.i1_1K, min_value=5, max_value=1_000+5)\n    \n        self.df.categorize(self.df.i8_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.BinBy1d.time_count_x_binby128",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "aggregates.BinBy2d.time_count_star": {
        "code": "class BinBy2d:\n    def time_count_star(self, N):\n        self.df.count(binby=[self.df.x, self.df.y], limits=[-1, -1], shape=128)\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i4_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i2_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i1_10, min_value=5, max_value=15, inplace=True)\n    \n        self.df.categorize(self.df.i8_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i2_1K, min_value=5, max_value=1_000+5, inplace=True)\n        # self.df.categorize(self.df.i1_1K, min_value=5, max_value=1_000+5)\n    \n        self.df.categorize(self.df.i8_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.BinBy2d.time_count_star",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "aggregates.BinBy2d.time_count_star_x4": {
        "code": "class BinBy2d:\n    def time_count_star_x4(self, N):\n        self.df.count(binby=[self.df.x4, self.df.y4], limits=[-1, -1], shape=128)\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i4_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i2_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i1_10, min_value=5, max_value=15, inplace=True)\n    \n        self.df.categorize(self.df.i8_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i2_1K, min_value=5, max_value=1_000+5, inplace=True)\n        # self.df.categorize(self.df.i1_1K, min_value=5, max_value=1_000+5)\n    \n        self.df.categorize(self.df.i8_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.BinBy2d.time_count_star_x4",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "aggregates.BinByCat10.time_binby_iB_10": {
        "code": "class BinByCat10:\n    def time_binby_iB_10(self, N, B):\n        self.df.count(binby=f'i{B}_10')\n\n    def setup(self, N, B):\n        super().setup(N)\n\nclass Aggregates:\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.BinByCat10.time_binby_iB_10",
        "number": 0,
        "param_names": [
            "N",
            "B"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ],
            [
                "1",
                "2",
                "4",
                "8"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "aggregates.BinByCat1K.time_binby_iB_1K": {
        "code": "class BinByCat1K:\n    def time_binby_iB_1K(self, N, B):\n        self.df.count(binby=f'i{B}_1K')\n\n    def setup(self, N, B):\n        super().setup(N)\n\nclass Aggregates:\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.BinByCat1K.time_binby_iB_1K",
        "number": 0,
        "param_names": [
            "N",
            "B"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ],
            [
                "2",
                "4",
                "8"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "aggregates.BinByCat1M.time_binby_iB_1M": {
        "code": "class BinByCat1M:\n    def time_binby_iB_1M(self, N, B):\n        self.df.count(binby=f'i{B}_1M')\n\n    def setup(self, N, B):\n        super().setup(N)\n\nclass Aggregates:\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.BinByCat1M.time_binby_iB_1M",
        "number": 0,
        "param_names": [
            "N",
            "B"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ],
            [
                "4",
                "8"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "aggregates.GroupByCat10.time_binby_iB_10": {
        "code": "class GroupByCat10:\n    def time_binby_iB_10(self, N, B):\n        self.df.groupby(f'i{B}_10', agg='count')\n\n    def setup(self, N, B):\n        super().setup(N)\n\nclass Aggregates:\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.GroupByCat10.time_binby_iB_10",
        "number": 0,
        "param_names": [
            "N",
            "B"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ],
            [
                "1",
                "2",
                "4",
                "8"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "aggregates.GroupByCat1K.time_binby_iB_1M": {
        "code": "class GroupByCat1K:\n    def time_binby_iB_1M(self, N, B):\n        self.df.groupby(f'i{B}_1K', agg='count')\n\n    def setup(self, N, B):\n        super().setup(N)\n\nclass Aggregates:\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.GroupByCat1K.time_binby_iB_1M",
        "number": 0,
        "param_names": [
            "N",
            "B"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ],
            [
                "2",
                "4",
                "8"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "aggregates.GroupByCat1M.time_binby_iB_1K": {
        "code": "class GroupByCat1M:\n    def time_binby_iB_1K(self, N, B):\n        self.df.groupby(f'i{B}_1M', agg='count')\n\n    def setup(self, N, B):\n        super().setup(N)\n\nclass Aggregates:\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.GroupByCat1M.time_binby_iB_1K",
        "number": 0,
        "param_names": [
            "N",
            "B"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ],
            [
                "4",
                "8"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "aggregates.Stats.time_count_star": {
        "code": "class Stats:\n    def time_count_star(self, N):\n        self.df.count()\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i4_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i2_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i1_10, min_value=5, max_value=15, inplace=True)\n    \n        self.df.categorize(self.df.i8_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i2_1K, min_value=5, max_value=1_000+5, inplace=True)\n        # self.df.categorize(self.df.i1_1K, min_value=5, max_value=1_000+5)\n    \n        self.df.categorize(self.df.i8_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.Stats.time_count_star",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "aggregates.Stats.time_mean_x": {
        "code": "class Stats:\n    def time_mean_x(self, N):\n        self.df.x.mean()\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i4_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i2_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i1_10, min_value=5, max_value=15, inplace=True)\n    \n        self.df.categorize(self.df.i8_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i2_1K, min_value=5, max_value=1_000+5, inplace=True)\n        # self.df.categorize(self.df.i1_1K, min_value=5, max_value=1_000+5)\n    \n        self.df.categorize(self.df.i8_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.Stats.time_mean_x",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "aggregates.Stats.time_mean_x4": {
        "code": "class Stats:\n    def time_mean_x4(self, N):\n        self.df.x4.mean()\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i4_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i2_10, min_value=5, max_value=15, inplace=True)\n        self.df.categorize(self.df.i1_10, min_value=5, max_value=15, inplace=True)\n    \n        self.df.categorize(self.df.i8_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1K, min_value=5, max_value=1_000+5, inplace=True)\n        self.df.categorize(self.df.i2_1K, min_value=5, max_value=1_000+5, inplace=True)\n        # self.df.categorize(self.df.i1_1K, min_value=5, max_value=1_000+5)\n    \n        self.df.categorize(self.df.i8_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n        self.df.categorize(self.df.i4_1M, min_value=5, max_value=1_000_000+5, inplace=True)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "aggregates.Stats.time_mean_x4",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "bookkeeping.time_concat": {
        "code": "def time_concat(n):\n    df1 = dfs[n]\n    df2 = dfs2[n]\n    df1.concat(df2)\n\ndef setup_concat(n):\n    dfs[n] = time_create(n)\n    dfs2[n] = time_create(n)",
        "min_run_count": 2,
        "name": "bookkeeping.time_concat",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "10",
                "50",
                "100",
                "1000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "183d1d11f6067add822eeb30c91fa48a1fda7f800d37bbafece2419e13c228da",
        "warmup_time": -1
    },
    "bookkeeping.time_copy": {
        "code": "def time_copy(n):\n    arr = np.random.random(size=(n, 10))\n    dfs[n].copy()\n\ndef setup_copy(n):\n    dfs[n] = time_create(n)",
        "min_run_count": 2,
        "name": "bookkeeping.time_copy",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "10",
                "50",
                "100",
                "1000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "225c1bd89b28427d035dced818c015c6e3c9bd8b7d221f9ef2abb715e86becd9",
        "warmup_time": -1
    },
    "bookkeeping.time_create": {
        "code": "def time_create(n):\n    arr = np.random.random(size=(n, 10))\n    df = vaex.from_arrays(**{str(k):arr[k] for k in range(n)})\n    return df",
        "min_run_count": 2,
        "name": "bookkeeping.time_create",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "10",
                "50",
                "100",
                "1000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "66f547ece91eaa4859939763acce539f706c856d5caf69cb8bb5a2dca4828844",
        "warmup_time": -1
    },
    "export.time_export_correlated": {
        "code": "def time_export_correlated(N, M):\n    names = df.get_column_names()\n    new_names = [f't{i}' for i in range(M)]\n    for i in range(M):\n        df[f't{i}'] = sum(df[c] for c in names)\n    dfc = df[new_names]\n    with tempfile.TemporaryDirectory() as tmpdir:\n        dfc.export_hdf5(os.path.join(tmpdir, 'bench.hdf5'))\n\ndef setup_df(N, M):\n    global df\n    x = [np.arange(N, dtype=np.float64) for _ in range(M)]\n    df = vaex.from_dict({\n        f'c{i}': x[i] for i in range(M)\n    })",
        "min_run_count": 2,
        "name": "export.time_export_correlated",
        "number": 0,
        "param_names": [
            "N",
            "M"
        ],
        "params": [
            [
                "1048576",
                "16777216"
            ],
            [
                "1",
                "4",
                "16"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4b396f367dd1aec6992a930ce0e585ee485cab892ba368cceba085dcb55c22ee",
        "warmup_time": -1
    },
    "export.time_export_plain": {
        "code": "def time_export_plain(N, M):\n    with tempfile.TemporaryDirectory() as tmpdir:\n        df.export_hdf5(os.path.join(tmpdir, 'bench.hdf5'))\n\ndef setup_df(N, M):\n    global df\n    x = [np.arange(N, dtype=np.float64) for _ in range(M)]\n    df = vaex.from_dict({\n        f'c{i}': x[i] for i in range(M)\n    })",
        "min_run_count": 2,
        "name": "export.time_export_plain",
        "number": 0,
        "param_names": [
            "N",
            "M"
        ],
        "params": [
            [
                "1048576",
                "16777216"
            ],
            [
                "1",
                "4",
                "16"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3201fc5115a7e0c53c76c12143dde5c064b829231c6c4dc0e8ecf9b4e90aba53",
        "warmup_time": -1
    },
    "filter.Filter.time_filter_and_head": {
        "code": "class Filter:\n    def time_filter_and_head(self, N):\n        self.dff.head()\n\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df['i4_1M_POT'] = self.df['i4_1M'] * 2 ** 8\n        self.dff = self.df[(self.df.x > 0) & (self.df.y < 0)]\n        len(self.dff)  # fill cache\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "filter.Filter.time_filter_and_head",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/filter.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "filter.Filter.time_filter_and_tail": {
        "code": "class Filter:\n    def time_filter_and_tail(self, N):\n        self.dff.tail()\n\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df['i4_1M_POT'] = self.df['i4_1M'] * 2 ** 8\n        self.dff = self.df[(self.df.x > 0) & (self.df.y < 0)]\n        len(self.dff)  # fill cache\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "filter.Filter.time_filter_and_tail",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/filter.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "filter.Filter.time_filter_count": {
        "code": "class Filter:\n    def time_filter_count(self, N):\n        self.dff.count('i1_100')  # but this should be super fast, since the cache\n\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df['i4_1M_POT'] = self.df['i4_1M'] * 2 ** 8\n        self.dff = self.df[(self.df.x > 0) & (self.df.y < 0)]\n        len(self.dff)  # fill cache\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "filter.Filter.time_filter_count",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/filter.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "groupby.GroupbyBasic.time_count_i1_100": {
        "code": "class GroupbyBasic:\n    def time_count_i1_100(self, N):\n        df = self.df.groupby(['i1_100'], agg='count')\n\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df['i4_1M_POT'] = self.df['i4_1M'] * 2 ** 8\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "groupby.GroupbyBasic.time_count_i1_100",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/groupby.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "groupby.GroupbyBasic.time_count_i4_1M": {
        "code": "class GroupbyBasic:\n    def time_count_i4_1M(self, N):\n        df = self.df.groupby(['i4_1M'], agg='count')\n\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df['i4_1M_POT'] = self.df['i4_1M'] * 2 ** 8\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "groupby.GroupbyBasic.time_count_i4_1M",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/groupby.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "groupby.GroupbyBasic.time_count_i4_1M_POT": {
        "code": "class GroupbyBasic:\n    def time_count_i4_1M_POT(self, N):\n        df = self.df.groupby(['i4_1M_POT'], agg='count')\n\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df['i4_1M_POT'] = self.df['i4_1M'] * 2 ** 8\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "groupby.GroupbyBasic.time_count_i4_1M_POT",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/groupby.py:13",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "groupbyh2o.GroupbyH2O.time_question_01": {
        "code": "class GroupbyH2O:\n    def time_question_01(self, N):\n        df = self.df.groupby(['id1']).agg({'v1': 'sum'})\n        if check:\n            chk_sum_cols = ['v1']\n            [df[col].sum() for col in chk_sum_cols]\n\nclass GroupBySetup:\n    def setup(self, N):\n        df = self.df = vaex.open(generate_numerical())[:N]\n        df['id1'] = df['i1_100']\n        df['id2'] = df['i1_100']\n        df['id3'] = df['i4_1M']\n        df['id4'] = df['i1_100']\n        df['id5'] = df['i1_100']\n        df['id6'] = df['i4_1M']\n        df['v1'] = df['i1_10']\n        df['v2'] = df['i1_10']\n        df['v3'] = df['x4']\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "groupbyh2o.GroupbyH2O.time_question_01",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/groupbyh2o.py:22",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "groupbyh2o.GroupbyH2O.time_question_02": {
        "code": "class GroupbyH2O:\n    def time_question_02(self, N):\n        df = self.df.groupby(['id1', 'id2']).agg({'v1': 'sum'})\n        if check:\n            chk_sum_cols=['v1']\n            [df[col].sum() for col in chk_sum_cols]\n\nclass GroupBySetup:\n    def setup(self, N):\n        df = self.df = vaex.open(generate_numerical())[:N]\n        df['id1'] = df['i1_100']\n        df['id2'] = df['i1_100']\n        df['id3'] = df['i4_1M']\n        df['id4'] = df['i1_100']\n        df['id5'] = df['i1_100']\n        df['id6'] = df['i4_1M']\n        df['v1'] = df['i1_10']\n        df['v2'] = df['i1_10']\n        df['v3'] = df['x4']\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "groupbyh2o.GroupbyH2O.time_question_02",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/groupbyh2o.py:22",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "groupbyh2o.GroupbyH2O.time_question_03": {
        "code": "class GroupbyH2O:\n    def time_question_03(self, N):\n        df = self.df.groupby(['id3']).agg({'v1': 'sum', 'v3': 'mean'})\n        if check:\n            chk_sum_cols=['v1', 'v3']\n            [df[col].sum() for col in chk_sum_cols]\n\nclass GroupBySetup:\n    def setup(self, N):\n        df = self.df = vaex.open(generate_numerical())[:N]\n        df['id1'] = df['i1_100']\n        df['id2'] = df['i1_100']\n        df['id3'] = df['i4_1M']\n        df['id4'] = df['i1_100']\n        df['id5'] = df['i1_100']\n        df['id6'] = df['i4_1M']\n        df['v1'] = df['i1_10']\n        df['v2'] = df['i1_10']\n        df['v3'] = df['x4']\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "groupbyh2o.GroupbyH2O.time_question_03",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/groupbyh2o.py:22",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "groupbyh2o.GroupbyH2O.time_question_04": {
        "code": "class GroupbyH2O:\n    def time_question_04(self, N):\n        df = self.df.groupby(['id4']).agg({'v1':'mean', 'v2':'mean', 'v3':'mean'})\n        if check:\n            chk_sum_cols=['v1', 'v2', 'v3']\n            [df[col].sum() for col in chk_sum_cols]\n\nclass GroupBySetup:\n    def setup(self, N):\n        df = self.df = vaex.open(generate_numerical())[:N]\n        df['id1'] = df['i1_100']\n        df['id2'] = df['i1_100']\n        df['id3'] = df['i4_1M']\n        df['id4'] = df['i1_100']\n        df['id5'] = df['i1_100']\n        df['id6'] = df['i4_1M']\n        df['v1'] = df['i1_10']\n        df['v2'] = df['i1_10']\n        df['v3'] = df['x4']\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "groupbyh2o.GroupbyH2O.time_question_04",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/groupbyh2o.py:22",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "groupbyh2o.GroupbyH2O.time_question_05": {
        "code": "class GroupbyH2O:\n    def time_question_05(self, N):\n        df = self.df.groupby(['id6']).agg({'v1': 'sum', 'v2': 'sum', 'v3': 'sum'})\n        if check:\n            chk_sum_cols=['v1', 'v2', 'v3']\n            [df[col].sum() for col in chk_sum_cols]\n\nclass GroupBySetup:\n    def setup(self, N):\n        df = self.df = vaex.open(generate_numerical())[:N]\n        df['id1'] = df['i1_100']\n        df['id2'] = df['i1_100']\n        df['id3'] = df['i4_1M']\n        df['id4'] = df['i1_100']\n        df['id5'] = df['i1_100']\n        df['id6'] = df['i4_1M']\n        df['v1'] = df['i1_10']\n        df['v2'] = df['i1_10']\n        df['v3'] = df['x4']\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "groupbyh2o.GroupbyH2O.time_question_05",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/groupbyh2o.py:22",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "groupbyh2o.GroupbyH2O.time_question_07": {
        "code": "class GroupbyH2O:\n    def time_question_07(self, N):\n        df = self.df.groupby(['id3']).agg({'v1': 'max', 'v2': 'min'})\n        df['range_x_y'] = df['v1'] - df['v2']\n        if check:\n            chk_sum_cols=['range_v1_v2']\n            [df[col].sum() for col in chk_sum_cols]\n\nclass GroupBySetup:\n    def setup(self, N):\n        df = self.df = vaex.open(generate_numerical())[:N]\n        df['id1'] = df['i1_100']\n        df['id2'] = df['i1_100']\n        df['id3'] = df['i4_1M']\n        df['id4'] = df['i1_100']\n        df['id5'] = df['i1_100']\n        df['id6'] = df['i4_1M']\n        df['v1'] = df['i1_10']\n        df['v2'] = df['i1_10']\n        df['v3'] = df['x4']\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "groupbyh2o.GroupbyH2O.time_question_07",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/groupbyh2o.py:22",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "groupbyh2o.GroupbyH2O.time_question_10": {
        "code": "class GroupbyH2O:\n    def time_question_10(self, N):\n        df = self.df.groupby(['id1', 'id2', 'id3', 'id4', 'id5', 'id6']).agg({'v3':'sum', 'v1':'count'})\n        if check:\n            chk_sum_cols=['v3', 'v1']\n            [df[col].sum() for col in chk_sum_cols]\n\nclass GroupBySetup:\n    def setup(self, N):\n        df = self.df = vaex.open(generate_numerical())[:N]\n        df['id1'] = df['i1_100']\n        df['id2'] = df['i1_100']\n        df['id3'] = df['i4_1M']\n        df['id4'] = df['i1_100']\n        df['id5'] = df['i1_100']\n        df['id6'] = df['i4_1M']\n        df['v1'] = df['i1_10']\n        df['v2'] = df['i1_10']\n        df['v3'] = df['x4']\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()",
        "min_run_count": 2,
        "name": "groupbyh2o.GroupbyH2O.time_question_10",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/groupbyh2o.py:22",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "hashmap.hashmap.time_strings_create": {
        "code": "class hashmap:\n    def time_strings_create(self):\n        self.dfs_small._hash_map_unique('s')\n\n    def setup(self):\n        dfs = vaex.open(generate_strings())\n        Nmax_strings = 1_000_000\n        self.dfs_small = dfs[:Nmax_strings]\n        self.hms = self.dfs_small._hash_map_unique(\"s\")",
        "min_run_count": 2,
        "name": "hashmap.hashmap.time_strings_create",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "hashmap.hashmap.time_strings_keys": {
        "code": "class hashmap:\n    def time_strings_keys(self):\n        self.hms.keys()\n\n    def setup(self):\n        dfs = vaex.open(generate_strings())\n        Nmax_strings = 1_000_000\n        self.dfs_small = dfs[:Nmax_strings]\n        self.hms = self.dfs_small._hash_map_unique(\"s\")",
        "min_run_count": 2,
        "name": "hashmap.hashmap.time_strings_keys",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "isin.IsIn.time_isin_i8_1M": {
        "code": "class IsIn:\n    def time_isin_i8_1M(self, N, M):\n        df = self.df_num\n        values = df.sample(M)['i8_1M'].values\n        df['i8_1M'].isin(values).sum()\n\n    def setup(self, N, M):\n        self.df_num = vaex.open(generate_numerical())[:N]\n        self.df_str = vaex.open(generate_strings())[:N]\n\n    def setup_cache(self):\n        generate_numerical()\n        generate_strings()",
        "min_run_count": 2,
        "name": "isin.IsIn.time_isin_i8_1M",
        "number": 0,
        "param_names": [
            "N",
            "M"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ],
            [
                "1",
                "10",
                "100",
                "1000",
                "1000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/isin.py:12",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "isin.IsIn.time_isin_str": {
        "code": "class IsIn:\n    def time_isin_str(self, N, M):\n        df = self.df_str\n        values = df.sample(M)['s'].values\n        df['s'].isin(values).sum()\n\n    def setup(self, N, M):\n        self.df_num = vaex.open(generate_numerical())[:N]\n        self.df_str = vaex.open(generate_strings())[:N]\n\n    def setup_cache(self):\n        generate_numerical()\n        generate_strings()",
        "min_run_count": 2,
        "name": "isin.IsIn.time_isin_str",
        "number": 0,
        "param_names": [
            "N",
            "M"
        ],
        "params": [
            [
                "10000000",
                "50000000",
                "100000000"
            ],
            [
                "1",
                "10",
                "100",
                "1000",
                "1000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/isin.py:12",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "sort.time_sort_ints": {
        "code": "def time_sort_ints(N, T):\n    df = vaex.open(generate_numerical())\n    df = df[:N]\n    df.sort(f'i8_{T}')",
        "min_run_count": 2,
        "name": "sort.time_sort_ints",
        "number": 0,
        "param_names": [
            "param1",
            "param2"
        ],
        "params": [
            [
                "100000",
                "1000000"
            ],
            [
                "'100'",
                "'1M'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c3ce432652f1d4592729e4709f687780e62392977c8b642db4cd00f5654d1eed",
        "warmup_time": -1
    },
    "sort.time_sort_strings": {
        "code": "def time_sort_strings(N):\n    df = vaex.open(generate_strings())\n    df = df[:N]\n    df.sort(df.s)",
        "min_run_count": 2,
        "name": "sort.time_sort_strings",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "100000",
                "1000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d6b69a1506e4675e2eb8588823b5393dbe3d1462cb290c097f5eb37041b9ef02",
        "warmup_time": -1
    },
    "strings.Strings.time_capitalize": {
        "code": "class Strings:\n    def time_capitalize(self, N):\n        self.df.s.str.capitalize().nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_capitalize",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_cat": {
        "code": "class Strings:\n    def time_cat(self, N):\n        self.df.s.str.cat(self.df.s).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_cat",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_contains": {
        "code": "class Strings:\n    def time_contains(self, N):\n        self.df.s.str.contains(\"9\", regex=False).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_contains",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_contains_regex": {
        "code": "class Strings:\n    def time_contains_regex(self, N):\n        self.df.s.str.contains(\"9\", regex=True).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_contains_regex",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_count": {
        "code": "class Strings:\n    def time_count(self, N):\n        self.df.s.str.count(\"9\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_count",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_endswith": {
        "code": "class Strings:\n    def time_endswith(self, N):\n        self.df.s.str.endswith(\"9\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_endswith",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_find": {
        "code": "class Strings:\n    def time_find(self, N):\n        self.df.s.str.find(\"4\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_find",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_get": {
        "code": "class Strings:\n    def time_get(self, N):\n        self.df.s.str.get(1).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_get",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_len": {
        "code": "class Strings:\n    def time_len(self, N):\n        self.df.s.str.len().nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_len",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_ljust": {
        "code": "class Strings:\n    def time_ljust(self, N):\n        self.df.s.str.ljust(10).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_ljust",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_lower": {
        "code": "class Strings:\n    def time_lower(self, N):\n        self.df.s.str.lower().nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_lower",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_lstrip": {
        "code": "class Strings:\n    def time_lstrip(self, N):\n        self.df.s.str.lstrip(\"9\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_lstrip",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_match": {
        "code": "class Strings:\n    def time_match(self, N):\n        self.df.s.str.match(\"1.*\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_match",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_pad": {
        "code": "class Strings:\n    def time_pad(self, N):\n        self.df.s.str.pad(10).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_pad",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_repeat": {
        "code": "class Strings:\n    def time_repeat(self, N):\n        self.df.s.str.repeat(2).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_repeat",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_replace_default": {
        "code": "class Strings:\n    def time_replace_default(self, N):\n        self.df.s.str.replace(\"123\", \"321\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_replace_default",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_replace_no_regex": {
        "code": "class Strings:\n    def time_replace_no_regex(self, N):\n        self.df.s.str.replace(\"123\", \"321\", regex=False).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_replace_no_regex",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_replace_regex": {
        "code": "class Strings:\n    def time_replace_regex(self, N):\n        self.df.s.str.replace(\"1?[45]4\", \"1004\", regex=True).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_replace_regex",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_rfind": {
        "code": "class Strings:\n    def time_rfind(self, N):\n        self.df.s.str.rfind(\"4\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_rfind",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_rjust": {
        "code": "class Strings:\n    def time_rjust(self, N):\n        self.df.s.str.rjust(10).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_rjust",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_rstrip": {
        "code": "class Strings:\n    def time_rstrip(self, N):\n        self.df.s.str.rstrip(\"9\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_rstrip",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_slice": {
        "code": "class Strings:\n    def time_slice(self, N):\n        self.df.s.str.slice(1, 3).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_slice",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_split": {
        "code": "class Strings:\n    def time_split(self, N):\n        self.df.s.str.split(\".\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_split",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_split_and_join": {
        "code": "class Strings:\n    def time_split_and_join(self, N):\n        self.df.s.str.split(\".\").str.join(\"-\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_split_and_join",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_startswith": {
        "code": "class Strings:\n    def time_startswith(self, N):\n        self.df.s.str.startswith(\"9\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_startswith",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_strip": {
        "code": "class Strings:\n    def time_strip(self, N):\n        self.df.s.str.strip(\"0\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_strip",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_title": {
        "code": "class Strings:\n    def time_title(self, N):\n        self.df.s.str.title().nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_title",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_upper": {
        "code": "class Strings:\n    def time_upper(self, N):\n        self.df.s.str.upper().nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_upper",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "strings.Strings.time_zfill": {
        "code": "class Strings:\n    def time_zfill(self, N):\n        self.df.s.str.zfill(10).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()",
        "min_run_count": 2,
        "name": "strings.Strings.time_zfill",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "10000000"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16",
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "1",
        "warmup_time": -1
    },
    "version": 2
}